import hashlib
import os
import json

def calculate_hash(file_path):
    
    sha256 = hashlib.sha256()
    try:
        with open(file_path, 'rb') as f:
            chunk = f.read(4096)
            while chunk:
                sha256.update(chunk)
                chunk = f.read(4096)
        return sha256.hexdigest()
    except FileNotFoundError:
        return None

def save_hash(file_path, hash_store="hashes.json"):
   
    file_hash = calculate_hash(file_path)
    if file_hash is None:
        print("File not found.")
        return

    if os.path.exists(hash_store):
        with open(hash_store, 'r') as f:
            data = json.load(f)
    else:
        data = {}

    data[file_path] = file_hash

    with open(hash_store, 'w') as f:
        json.dump(data, f, indent=4)
    
    print(f"Hash for '{file_path}' saved/updated.")

def verify_file(file_path, hash_store="hashes.json"):
    
    if not os.path.exists(hash_store):
        print("Hash store not found.")
        return

    with open(hash_store, 'r') as f:
        data = json.load(f)

    if file_path not in data:
        print(f"No stored hash found for '{file_path}'. Please save it first.")
        return

    current_hash = calculate_hash(file_path)
    if current_hash == data[file_path]:
        print(f"No changes detected in '{file_path}'.")
    else:
        print(f"WARNING: '{file_path}' has been modified!")


if __name__ == "__main__":
    print("\nFile Integrity Checker\n")
    file_to_check = input("Enter file path: ")
    action = input("Choose action - [s]ave hash or [v]erify file: ").lower()

    if action == 's':
        save_hash(file_to_check)
    elif action == 'v':
        verify_file(file_to_check)
    else:
        print("Invalid option.")
